package practice

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	mm_params "github.com/gojuno/minimock/internal/params"
)

// TargetMock implements main.Target
type TargetMock struct {
	t minimock.Tester

	funcShoot          func(ctx context.Context, projectile string) (err error)
	afterShootCounter  uint64
	beforeShootCounter uint64
	ShootMock          mTargetMockShoot

	MinimockArg mTargetMockArgs
}

// NewTargetMock returns a mock for main.Target
func NewTargetMock(t minimock.Tester) *TargetMock {
	m := &TargetMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ShootMock = mTargetMockShoot{mock: m}
	m.ShootMock.callArgs = []*TargetMockShootParams{}

	return m
}

type mTargetMockArgs struct {
	matchers mm_params.Matchers
}

func (m *mTargetMockArgs) MatchedContextContext(matches func(context.Context) bool) (z context.Context) {
	m.matchers.AddMatchFunc(matches)
	return z
}

func (m *mTargetMockArgs) MatchedString(matches func(string) bool) (z string) {
	m.matchers.AddMatchFunc(matches)
	return z
}

type mTargetMockShoot struct {
	mock               *TargetMock
	defaultExpectation *TargetMockShootExpectation
	expectations       []*TargetMockShootExpectation

	callArgs []*TargetMockShootParams
	mutex    sync.RWMutex
}

// TargetMockShootExpectation specifies expectation struct of the Target.Shoot
type TargetMockShootExpectation struct {
	mock     *TargetMock
	params   *TargetMockShootParams
	matchers *TargetMockShootMatchers
	results  *TargetMockShootResults
	Counter  uint64
}

// TargetMockShootParams contains parameters of the Target.Shoot
type TargetMockShootParams struct {
	ctx        context.Context
	projectile string
}

type TargetMockShootMatchers struct {
	ctx        func(context.Context) bool
	projectile func(string) bool
}

// TargetMockShootResults contains results of the Target.Shoot
type TargetMockShootResults struct {
	err error
}

// Expect sets up expected params for Target.Shoot
func (mmShoot *mTargetMockShoot) Expect(ctx context.Context, projectile string) *mTargetMockShoot {
	if mmShoot.mock.funcShoot != nil {
		mmShoot.mock.t.Fatalf("TargetMock.Shoot mock is already set by Set")
	}

	if mmShoot.defaultExpectation == nil {
		mmShoot.defaultExpectation = &TargetMockShootExpectation{}
	}

	mmShoot.defaultExpectation.params = &TargetMockShootParams{ctx, projectile}
	for _, e := range mmShoot.expectations {
		if minimock.Equal(e.params, mmShoot.defaultExpectation.params) {
			mmShoot.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmShoot.defaultExpectation.params)
		}
	}

	return mmShoot
}

// Return sets up results that will be returned by Target.Shoot
func (mmShoot *mTargetMockShoot) Return(err error) *TargetMock {
	if mmShoot.mock.funcShoot != nil {
		mmShoot.mock.t.Fatalf("TargetMock.Shoot mock is already set by Set")
	}

	if mmShoot.defaultExpectation == nil {
		mmShoot.defaultExpectation = &TargetMockShootExpectation{mock: mmShoot.mock}
	}
	mmShoot.defaultExpectation.results = &TargetMockShootResults{err}
	return mmShoot.mock
}

//Set uses given function f to mock the Target.Shoot method
func (mmShoot *mTargetMockShoot) Set(f func(ctx context.Context, projectile string) (err error)) *TargetMock {
	if mmShoot.defaultExpectation != nil {
		mmShoot.mock.t.Fatalf("Default expectation is already set for the Target.Shoot method")
	}

	if len(mmShoot.expectations) > 0 {
		mmShoot.mock.t.Fatalf("Some expectations are already set for the Target.Shoot method")
	}

	mmShoot.mock.funcShoot = f
	return mmShoot.mock
}

// When sets expectation for the Target.Shoot which will trigger the result defined by the following
// Then helper
func (mmShoot *mTargetMockShoot) When(ctx context.Context, projectile string) *TargetMockShootExpectation {
	if mmShoot.mock.funcShoot != nil {
		mmShoot.mock.t.Fatalf("TargetMock.Shoot mock is already set by Set")
	}
	mm_m, mm_e := &TargetMockShootMatchers{}, &TargetMockShootParams{}
	mmShoot.mock.MinimockArg.matchers.Expectation(mmShoot.mock.t, "TargetMock.Shoot").
		Next(ctx, &mm_m.ctx, &mm_e.ctx).
		Next(projectile, &mm_m.projectile, &mm_e.projectile).
		Done()
	mm_me := &TargetMockShootExpectation{mock: mmShoot.mock, params: mm_e, matchers: mm_m}
	mmShoot.expectations = append(mmShoot.expectations, mm_me)
	return mm_me
}

// Then sets up Target.Shoot return parameters for the expectation previously defined by the When method
func (e *TargetMockShootExpectation) Then(err error) *TargetMock {
	e.results = &TargetMockShootResults{err}
	return e.mock
}

// Shoot implements main.Target
func (mmShoot *TargetMock) Shoot(ctx context.Context, projectile string) (err error) {
	mm_atomic.AddUint64(&mmShoot.beforeShootCounter, 1)
	defer mm_atomic.AddUint64(&mmShoot.afterShootCounter, 1)

	params := &TargetMockShootParams{ctx, projectile}

	// Record call args
	mmShoot.ShootMock.mutex.Lock()
	mmShoot.ShootMock.callArgs = append(mmShoot.ShootMock.callArgs, params)
	mmShoot.ShootMock.mutex.Unlock()

	for _, e := range mmShoot.ShootMock.expectations {
		if true && (e.matchers.ctx != nil && e.matchers.ctx(ctx) || e.matchers.ctx == nil && minimock.Equal(e.params.ctx, ctx)) && (e.matchers.projectile != nil && e.matchers.projectile(projectile) || e.matchers.projectile == nil && minimock.Equal(e.params.projectile, projectile)) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmShoot.ShootMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmShoot.ShootMock.defaultExpectation.Counter, 1)
		want := mmShoot.ShootMock.defaultExpectation.params
		got := TargetMockShootParams{ctx, projectile}
		if want != nil && !minimock.Equal(*want, got) {
			mmShoot.t.Errorf("TargetMock.Shoot got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmShoot.ShootMock.defaultExpectation.results
		if results == nil {
			mmShoot.t.Fatal("No results are set for the TargetMock.Shoot")
		}
		return (*results).err
	}
	if mmShoot.funcShoot != nil {
		return mmShoot.funcShoot(ctx, projectile)
	}
	mmShoot.t.Fatalf("Unexpected call to TargetMock.Shoot. %v %v", ctx, projectile)
	return
}

// ShootAfterCounter returns a count of finished TargetMock.Shoot invocations
func (mmShoot *TargetMock) ShootAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmShoot.afterShootCounter)
}

// ShootBeforeCounter returns a count of TargetMock.Shoot invocations
func (mmShoot *TargetMock) ShootBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmShoot.beforeShootCounter)
}

// Calls returns a list of arguments used in each call to TargetMock.Shoot.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmShoot *mTargetMockShoot) Calls() []*TargetMockShootParams {
	mmShoot.mutex.RLock()

	argCopy := make([]*TargetMockShootParams, len(mmShoot.callArgs))
	copy(argCopy, mmShoot.callArgs)

	mmShoot.mutex.RUnlock()

	return argCopy
}

// MinimockShootDone returns true if the count of the Shoot invocations corresponds
// the number of defined expectations
func (m *TargetMock) MinimockShootDone() bool {
	for _, e := range m.ShootMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ShootMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterShootCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcShoot != nil && mm_atomic.LoadUint64(&m.afterShootCounter) < 1 {
		return false
	}
	return true
}

// MinimockShootInspect logs each unmet expectation
func (m *TargetMock) MinimockShootInspect() {
	for _, e := range m.ShootMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TargetMock.Shoot with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ShootMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterShootCounter) < 1 {
		if m.ShootMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TargetMock.Shoot")
		} else {
			m.t.Errorf("Expected call to TargetMock.Shoot with params: %#v", *m.ShootMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcShoot != nil && mm_atomic.LoadUint64(&m.afterShootCounter) < 1 {
		m.t.Error("Expected call to TargetMock.Shoot")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TargetMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockShootInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TargetMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TargetMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockShootDone()
}
