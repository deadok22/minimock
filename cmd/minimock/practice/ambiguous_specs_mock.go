package practice

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	mm_params "github.com/gojuno/minimock/internal/params"
)

// AmbiguousSpecsMock implements main.AmbiguousSpecs
type AmbiguousSpecsMock struct {
	t minimock.Tester

	funcTryIt          func(i1 int, i2 int, i3 int) (err error)
	afterTryItCounter  uint64
	beforeTryItCounter uint64
	TryItMock          mAmbiguousSpecsMockTryIt

	MinimockArg mAmbiguousSpecsMockArgs
}

// NewAmbiguousSpecsMock returns a mock for main.AmbiguousSpecs
func NewAmbiguousSpecsMock(t minimock.Tester) *AmbiguousSpecsMock {
	m := &AmbiguousSpecsMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.TryItMock = mAmbiguousSpecsMockTryIt{mock: m}
	m.TryItMock.callArgs = []*AmbiguousSpecsMockTryItParams{}

	return m
}

type mAmbiguousSpecsMockArgs struct {
	matchers mm_params.Matchers
}

func (m *mAmbiguousSpecsMockArgs) MatchedInt(matches func(int) bool) (z int) {
	m.matchers.AddMatchFunc(matches)
	return z
}

type mAmbiguousSpecsMockTryIt struct {
	mock               *AmbiguousSpecsMock
	defaultExpectation *AmbiguousSpecsMockTryItExpectation
	expectations       []*AmbiguousSpecsMockTryItExpectation

	callArgs []*AmbiguousSpecsMockTryItParams
	mutex    sync.RWMutex
}

// AmbiguousSpecsMockTryItExpectation specifies expectation struct of the AmbiguousSpecs.TryIt
type AmbiguousSpecsMockTryItExpectation struct {
	mock     *AmbiguousSpecsMock
	params   *AmbiguousSpecsMockTryItParams
	matchers *AmbiguousSpecsMockTryItMatchers
	results  *AmbiguousSpecsMockTryItResults
	Counter  uint64
}

// AmbiguousSpecsMockTryItParams contains parameters of the AmbiguousSpecs.TryIt
type AmbiguousSpecsMockTryItParams struct {
	i1 int
	i2 int
	i3 int
}

type AmbiguousSpecsMockTryItMatchers struct {
	i1 func(int) bool
	i2 func(int) bool
	i3 func(int) bool
}

// AmbiguousSpecsMockTryItResults contains results of the AmbiguousSpecs.TryIt
type AmbiguousSpecsMockTryItResults struct {
	err error
}

// Expect sets up expected params for AmbiguousSpecs.TryIt
func (mmTryIt *mAmbiguousSpecsMockTryIt) Expect(i1 int, i2 int, i3 int) *mAmbiguousSpecsMockTryIt {
	if mmTryIt.mock.funcTryIt != nil {
		mmTryIt.mock.t.Fatalf("AmbiguousSpecsMock.TryIt mock is already set by Set")
	}

	if mmTryIt.defaultExpectation == nil {
		mmTryIt.defaultExpectation = &AmbiguousSpecsMockTryItExpectation{}
	}

	mmTryIt.defaultExpectation.params = &AmbiguousSpecsMockTryItParams{i1, i2, i3}
	for _, e := range mmTryIt.expectations {
		if minimock.Equal(e.params, mmTryIt.defaultExpectation.params) {
			mmTryIt.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTryIt.defaultExpectation.params)
		}
	}

	return mmTryIt
}

// Return sets up results that will be returned by AmbiguousSpecs.TryIt
func (mmTryIt *mAmbiguousSpecsMockTryIt) Return(err error) *AmbiguousSpecsMock {
	if mmTryIt.mock.funcTryIt != nil {
		mmTryIt.mock.t.Fatalf("AmbiguousSpecsMock.TryIt mock is already set by Set")
	}

	if mmTryIt.defaultExpectation == nil {
		mmTryIt.defaultExpectation = &AmbiguousSpecsMockTryItExpectation{mock: mmTryIt.mock}
	}
	mmTryIt.defaultExpectation.results = &AmbiguousSpecsMockTryItResults{err}
	return mmTryIt.mock
}

//Set uses given function f to mock the AmbiguousSpecs.TryIt method
func (mmTryIt *mAmbiguousSpecsMockTryIt) Set(f func(i1 int, i2 int, i3 int) (err error)) *AmbiguousSpecsMock {
	if mmTryIt.defaultExpectation != nil {
		mmTryIt.mock.t.Fatalf("Default expectation is already set for the AmbiguousSpecs.TryIt method")
	}

	if len(mmTryIt.expectations) > 0 {
		mmTryIt.mock.t.Fatalf("Some expectations are already set for the AmbiguousSpecs.TryIt method")
	}

	mmTryIt.mock.funcTryIt = f
	return mmTryIt.mock
}

// When sets expectation for the AmbiguousSpecs.TryIt which will trigger the result defined by the following
// Then helper
func (mmTryIt *mAmbiguousSpecsMockTryIt) When(i1 int, i2 int, i3 int) *AmbiguousSpecsMockTryItExpectation {
	if mmTryIt.mock.funcTryIt != nil {
		mmTryIt.mock.t.Fatalf("AmbiguousSpecsMock.TryIt mock is already set by Set")
	}
	mm_m, mm_e := &AmbiguousSpecsMockTryItMatchers{}, &AmbiguousSpecsMockTryItParams{}
	mmTryIt.mock.MinimockArg.matchers.Expectation(mmTryIt.mock.t, "AmbiguousSpecsMock.TryIt").
		Next(i1, &mm_m.i1, &mm_e.i1).
		Next(i2, &mm_m.i2, &mm_e.i2).
		Next(i3, &mm_m.i3, &mm_e.i3).
		Done()
	mm_me := &AmbiguousSpecsMockTryItExpectation{mock: mmTryIt.mock, params: mm_e, matchers: mm_m}
	mmTryIt.expectations = append(mmTryIt.expectations, mm_me)
	return mm_me
}

// Then sets up AmbiguousSpecs.TryIt return parameters for the expectation previously defined by the When method
func (e *AmbiguousSpecsMockTryItExpectation) Then(err error) *AmbiguousSpecsMock {
	e.results = &AmbiguousSpecsMockTryItResults{err}
	return e.mock
}

// TryIt implements main.AmbiguousSpecs
func (mmTryIt *AmbiguousSpecsMock) TryIt(i1 int, i2 int, i3 int) (err error) {
	mm_atomic.AddUint64(&mmTryIt.beforeTryItCounter, 1)
	defer mm_atomic.AddUint64(&mmTryIt.afterTryItCounter, 1)

	params := &AmbiguousSpecsMockTryItParams{i1, i2, i3}

	// Record call args
	mmTryIt.TryItMock.mutex.Lock()
	mmTryIt.TryItMock.callArgs = append(mmTryIt.TryItMock.callArgs, params)
	mmTryIt.TryItMock.mutex.Unlock()

	for _, e := range mmTryIt.TryItMock.expectations {
		if true && (e.matchers.i1 != nil && e.matchers.i1(i1) || e.matchers.i1 == nil && minimock.Equal(e.params.i1, i1)) && (e.matchers.i2 != nil && e.matchers.i2(i2) || e.matchers.i2 == nil && minimock.Equal(e.params.i2, i2)) && (e.matchers.i3 != nil && e.matchers.i3(i3) || e.matchers.i3 == nil && minimock.Equal(e.params.i3, i3)) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmTryIt.TryItMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTryIt.TryItMock.defaultExpectation.Counter, 1)
		want := mmTryIt.TryItMock.defaultExpectation.params
		got := AmbiguousSpecsMockTryItParams{i1, i2, i3}
		if want != nil && !minimock.Equal(*want, got) {
			mmTryIt.t.Errorf("AmbiguousSpecsMock.TryIt got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmTryIt.TryItMock.defaultExpectation.results
		if results == nil {
			mmTryIt.t.Fatal("No results are set for the AmbiguousSpecsMock.TryIt")
		}
		return (*results).err
	}
	if mmTryIt.funcTryIt != nil {
		return mmTryIt.funcTryIt(i1, i2, i3)
	}
	mmTryIt.t.Fatalf("Unexpected call to AmbiguousSpecsMock.TryIt. %v %v %v", i1, i2, i3)
	return
}

// TryItAfterCounter returns a count of finished AmbiguousSpecsMock.TryIt invocations
func (mmTryIt *AmbiguousSpecsMock) TryItAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTryIt.afterTryItCounter)
}

// TryItBeforeCounter returns a count of AmbiguousSpecsMock.TryIt invocations
func (mmTryIt *AmbiguousSpecsMock) TryItBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTryIt.beforeTryItCounter)
}

// Calls returns a list of arguments used in each call to AmbiguousSpecsMock.TryIt.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTryIt *mAmbiguousSpecsMockTryIt) Calls() []*AmbiguousSpecsMockTryItParams {
	mmTryIt.mutex.RLock()

	argCopy := make([]*AmbiguousSpecsMockTryItParams, len(mmTryIt.callArgs))
	copy(argCopy, mmTryIt.callArgs)

	mmTryIt.mutex.RUnlock()

	return argCopy
}

// MinimockTryItDone returns true if the count of the TryIt invocations corresponds
// the number of defined expectations
func (m *AmbiguousSpecsMock) MinimockTryItDone() bool {
	for _, e := range m.TryItMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TryItMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTryItCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTryIt != nil && mm_atomic.LoadUint64(&m.afterTryItCounter) < 1 {
		return false
	}
	return true
}

// MinimockTryItInspect logs each unmet expectation
func (m *AmbiguousSpecsMock) MinimockTryItInspect() {
	for _, e := range m.TryItMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AmbiguousSpecsMock.TryIt with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TryItMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTryItCounter) < 1 {
		if m.TryItMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to AmbiguousSpecsMock.TryIt")
		} else {
			m.t.Errorf("Expected call to AmbiguousSpecsMock.TryIt with params: %#v", *m.TryItMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTryIt != nil && mm_atomic.LoadUint64(&m.afterTryItCounter) < 1 {
		m.t.Error("Expected call to AmbiguousSpecsMock.TryIt")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AmbiguousSpecsMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockTryItInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AmbiguousSpecsMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AmbiguousSpecsMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockTryItDone()
}
